using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace C3TekClient.MyViettel
{
    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using QuickType;
    //
    //    var responseMyViettelRegister = ResponseMyViettelRegister.FromJson(jsonString);




    public partial class ResponseMyViettelRegister
    {
        [JsonProperty("errorCode")]
        public string ErrorCode { get; set; }

        [JsonProperty("message")]
        public string Message { get; set; }

        [JsonProperty("data")]
        public ResponseMyViettelRegisterData Data { get; set; }

        [JsonProperty("tranIdTracking")]
        public string TranIdTracking { get; set; }
    }

    public partial class ResponseMyViettelRegisterData
    {
        [JsonProperty("debug_mode")]
        public long DebugMode { get; set; }

        [JsonProperty("errorCode")]
        public long ErrorCode { get; set; }

        [JsonProperty("message")]
        public string Message { get; set; }

        [JsonProperty("data")]
        public DataData Data { get; set; }

        [JsonProperty("firstLoginInday")]
        public object FirstLoginInday { get; set; }
    }

    public partial class DataData
    {
        [JsonProperty("isViettelInternal")]
        public long IsViettelInternal { get; set; }

        [JsonProperty("token")]
        public string Token { get; set; }

        [JsonProperty("keyRefresh")]
        public string KeyRefresh { get; set; }

        [JsonProperty("checksum")]
        public string Checksum { get; set; }

        [JsonProperty("passExpired")]
        public long PassExpired { get; set; }

        [JsonProperty("keyRefreshFingerPrint")]
        public string KeyRefreshFingerPrint { get; set; }

        [JsonProperty("keyDeviceAcc")]
        public string KeyDeviceAcc { get; set; }

        [JsonProperty("isChargePasswordSet")]
        public long IsChargePasswordSet { get; set; }

        [JsonProperty("telType")]
        public string TelType { get; set; }

        [JsonProperty("display_name")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long DisplayName { get; set; }

        [JsonProperty("phone_number")]
        public string PhoneNumber { get; set; }

        [JsonProperty("serviceType")]
        public string ServiceType { get; set; }

        [JsonProperty("contract_id")]
        public string ContractId { get; set; }

        [JsonProperty("sub_id")]
        public string SubId { get; set; }

        [JsonProperty("cusId")]
        public string CusId { get; set; }

        [JsonProperty("contractPhone")]
        public string ContractPhone { get; set; }

        [JsonProperty("productCode")]
        public string ProductCode { get; set; }

        [JsonProperty("fullName")]
        public string FullName { get; set; }

        [JsonProperty("birthday")]
        public string Birthday { get; set; }

        [JsonProperty("cmnd_number")]
        public string CmndNumber { get; set; }

        [JsonProperty("cmnd_date")]
        public string CmndDate { get; set; }

        [JsonProperty("cmnd_place")]
        public string CmndPlace { get; set; }

        [JsonProperty("is_security")]
        public long IsSecurity { get; set; }

        [JsonProperty("isLockApp")]
        public long IsLockApp { get; set; }

        [JsonProperty("survey")]
        public long Survey { get; set; }

        [JsonProperty("user_type")]
        public UserType UserType { get; set; }

        [JsonProperty("user_type_name")]
        public string UserTypeName { get; set; }

        [JsonProperty("is_privilege")]
        public long IsPrivilege { get; set; }

        [JsonProperty("is_member")]
        public long IsMember { get; set; }

        [JsonProperty("adminPrivilege")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long AdminPrivilege { get; set; }

        [JsonProperty("avatar")]
        public string Avatar { get; set; }

        [JsonProperty("email")]
        public string Email { get; set; }

        [JsonProperty("job")]
        public string Job { get; set; }

        [JsonProperty("hobby")]
        public string Hobby { get; set; }

        [JsonProperty("is_viettel_user")]
        public long IsViettelUser { get; set; }

        [JsonProperty("jobs")]
        public List<string> Jobs { get; set; }

        [JsonProperty("hobbies")]
        public List<string> Hobbies { get; set; }

        [JsonProperty("time_syn")]
        public long TimeSyn { get; set; }

        [JsonProperty("theme")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Theme { get; set; }

        [JsonProperty("contactNo")]
        public string ContactNo { get; set; }

        [JsonProperty("lastSynContact")]
        public string LastSynContact { get; set; }

        [JsonProperty("need_confirm_device")]
        public bool NeedConfirmDevice { get; set; }
    }

    public partial class UserType
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("type_name")]
        public string TypeName { get; set; }

        [JsonProperty("user_type")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long UserTypeUserType { get; set; }

        [JsonProperty("user_type_name")]
        public string UserTypeName { get; set; }
    }



    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}

